# main_app.py

import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

class MainApp(tk.Toplevel):
    def __init__(self, master, db_manager):
        
        # S·ª≠ d·ª•ng Toplevel ƒë·ªÉ t·∫°o c·ª≠a s·ªï ch√≠nh sau khi c·ª≠a s·ªï ƒëƒÉng nh·∫≠p ƒë√£ b·ªã ·∫©n/h·ªßy
        super().__init__(master) 
        self.db_manager = db_manager
        self.title("·ª®ng D·ª•ng Qu·∫£n L√Ω Sinh Vi√™n (QLSV) - MSSQL")
        self.geometry("900x600")
        
        # ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë∆∞·ª£c ƒë√≥ng khi c·ª≠a s·ªï b·ªã ƒë√≥ng
        self.protocol("WM_DELETE_WINDOW", self._on_closing)

        self.config(background="#FFFFFF")

        style = ttk.Style()
        style.theme_use('clam')


        self.label_Title = ttk.Label(self, text="PH·∫¶N M·ªÄM QU·∫¢N L√ù SINH VI√äN")
        self.label_Title.pack(side='top',padx=5,pady=20, anchor="center")
        self.label_Title.config(font=("Segoe UI", 20, 'bold'), foreground="#032E5B", background="#FFFFFF")

        self._setup_tabs()
        

    def _on_closing(self):
        """ƒê√≥ng k·∫øt n·ªëi database an to√†n khi ·ª©ng d·ª•ng tho√°t."""
        if messagebox.askokcancel("Tho√°t", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ·ª©ng d·ª•ng?"):
            self.db_manager.disconnect()
            self.master.destroy() # H·ªßy c·ª≠a s·ªï g·ªëc (n·∫øu c√≥)
            self.destroy()

    
    def _setup_tabs(self):
        notebook = ttk.Notebook(self)
        notebook.pack(expand=True, fill="both")

        # --- T·∫°o t·ª´ng tab ---
        self.tab_sinhvien = ttk.Frame(notebook)
        self.tab_mohoc = ttk.Frame(notebook)
        self.tab_bangdiem = ttk.Frame(notebook)

        # --- Th√™m tab v√†o notebook ---
        notebook.add(self.tab_sinhvien, text="Sinh vi√™n")
        notebook.add(self.tab_mohoc, text="M√¥n h·ªçc")
        notebook.add(self.tab_bangdiem, text="B√†ng ƒëi·ªÉm")

         # --- G·ªçi setup cho t·ª´ng tab ---
        self._setup_layout_sinhvien(self.tab_sinhvien)
        #self._setup_tab_khoa(self.tab_mohoc)
        #self._setup_tab_thongke(self.tab_bangdiem)

    def _setup_layout_sinhvien(self,parent):
        style = ttk.Style()
        style.configure('Custom.TFrame',background="#D1D3D4")

        self.input_frame = ttk.LabelFrame(parent, text="Th√¥ng Tin Sinh Vi√™n",style='Custom.TFrame') 
        self.input_frame.pack(padx=10, pady=10, fill="x")

        #Frame cho thanh t√¨m ki·∫øm
        self.search_bar_frame = ttk.Frame(parent)
        self.search_bar_frame.pack(padx=100, pady=5, fill="x")

        #Frame cho b·∫£ng Treeview
        tree_frame = ttk.Frame(parent)
        
        tree_frame.pack(padx=5, pady=10, fill="both", expand=True)
        self.tree_frame = tree_frame

        
        self._setup_input_fields()
        self._setup_student_treeview()
        self.load_students()
        
        
    def _setup_input_fields(self):
        """T·∫°o c√°c nh√£n v√† √¥ nh·∫≠p li·ªáu."""
        input_frame = self.input_frame 

        # 1. Kh·ªüi t·∫°o dictionary ƒë·ªÉ l∆∞u tr·ªØ Entry widgets
        self.entries = {}
        
        # ---MSSV ---
        ttk.Label(input_frame, text="MSSV", font=("Arial", 12, 'bold')).grid(row=1, column=0, padx=5, pady=5, sticky="w")
        entry_masv = ttk.Entry(input_frame, width=15)
        entry_masv.grid(row=1, column=1, padx=5, pady=5, sticky="w")
        self.entries['masv'] = entry_masv # üîë L∆ØU TR·ªÆ

        # --- H·ªå V√Ä T√äN ---
        ttk.Label(input_frame, text="H·ªç v√† t√™n", font=("Arial", 12, 'bold')).grid(row=2, column=0, padx=5, pady=5, sticky="w")
        entry_ten = ttk.Entry(input_frame, width=30)
        entry_ten.grid(row=2, column=1, padx=5, pady=5, sticky="w")
        self.entries['ten'] = entry_ten # üîë L∆ØU TR·ªÆ

        # --- GI·ªöI T√çNH ---
        style = ttk.Style()
        style.configure('Custom.TRadiobutton',font=("Arial", 10, 'bold'))
        rad_gt = tk.StringVar(value="Nam")
        ttk.Label(input_frame, text="Gi·ªõi t√≠nh", font=("Arial", 12, 'bold')).grid(row=3, column=0, padx=5, pady=5, sticky="w")
        rad_gtnam = ttk.Radiobutton(input_frame, text="Nam", value="Nam",variable=rad_gt,style='Custom.TRadiobutton')
        rad_gtnam.grid(row=3, column=1, padx=5, pady=5, sticky="w")

        rad_gtnu = ttk.Radiobutton(input_frame, text="N·ªØ", value="Nu",variable=rad_gt,style='Custom.TRadiobutton')
        rad_gtnu.grid(row=3, column=1, padx=100, pady=5, sticky="w")

        self.entries['gioitinh'] = rad_gt # üîë L∆ØU TR·ªÆ

         # --- NG√ÄY SINH ---
        ttk.Label(input_frame, text="Ng√†y sinh", font=("Arial", 12, 'bold')).grid(row=4, column=0, padx=5, pady=5, sticky="w")
        entry_ngaysinh = ttk.Entry(input_frame, width=30)
        entry_ngaysinh.grid(row=4, column=1, padx=5, pady=5, sticky="w")
        self.entries['ngaysinh'] = entry_ngaysinh # üîë L∆ØU TR·ªÆ

        # --- ƒê·ªäA CH·ªà ---
        ttk.Label(input_frame, text="ƒê·ªãa ch·ªâ", font=("Arial", 12, 'bold')).grid(row=1, column=2, padx=5, pady=5, sticky="w")
        entry_diachi = ttk.Entry(input_frame, width=30)
        entry_diachi.grid(row=1, column=3, padx=5, pady=5, sticky="w")
        self.entries['diachi'] = entry_diachi # üîë L∆ØU TR·ªÆ

        # --- KH√ìA H·ªåC ---
        ttk.Label(input_frame, text="Kh√≥a h·ªçc", font=("Arial", 12, 'bold')).grid(row=2, column=2, padx=5, pady=5, sticky="w")
        entry_khoahoc = ttk.Entry(input_frame, width=8)
        entry_khoahoc.grid(row=2, column=3, padx=5, pady=5, sticky="w")
        self.entries['khoahoc'] = entry_khoahoc # üîë L∆ØU TR·ªÆ

        # --- KHOA ---
        # ƒê√£ chuy·ªÉn nh√£n Khoa sang c·ªôt 2 ƒë·ªÉ tr√°nh b·ªã ƒë√® l√™n √¥ nh·∫≠p NƒÉm.
        ttk.Label(input_frame, text="Khoa", font=("Arial", 12, 'bold')).grid(row=3, column=2, padx=5, pady=5, sticky="w") 
        entry_khoa = ttk.Entry(input_frame, width=15)
        entry_khoa.grid(row=3, column=3, padx=5, pady=5, sticky="w")
        self.entries['khoa'] = entry_khoa # üîë L∆ØU TR·ªÆ

         # --- EMAIL ---
        ttk.Label(input_frame, text="Email", font=("Arial", 12, 'bold')).grid(row=4, column=2, padx=5, pady=5, sticky="w")
        entry_email = ttk.Entry(input_frame, width=30)
        entry_email.grid(row=4, column=3, padx=5, pady=5, sticky="w")
        self.entries['email'] = entry_email # üîë L∆ØU TR·ªÆ

        ttk.Button(input_frame, text="Th√™m SV", command=self.handle_add_student).grid(row=1, column=5, padx=10, pady=5, sticky="w") 
        ttk.Button(input_frame, text="X√≥a SV", command=self.handle_delete_student).grid(row=2, column=5, padx=10, pady=5, sticky="w")
        ttk.Button(input_frame, text="L√†m M·ªõi", command=self.load_students).grid(row=3, column=5, padx=10, pady=5, sticky="w")

        # ƒê·∫£m b·∫£o c√°c c·ªôt tr·ªëng ph√≠a sau m·ªü r·ªông (ch√∫ √Ω c·ªôt cu·ªëi c√πng l√† c·ªôt 4)
        input_frame.grid_columnconfigure(4, weight=1)

        search_frame = self.search_bar_frame # Container l√† Frame t√¨m ki·∫øm m·ªõi
        ttk.Label(search_frame, text="T√¨m ki·∫øm M√£ SV:", font=("Arial", 12, "bold","italic")).pack(side="left", padx=5)
        entry_search_masv = ttk.Entry(search_frame, width=30)
        entry_search_masv.pack(side="left", padx=5, fill="x", expand=True)
        self.entries['search_masv'] = entry_search_masv

        ttk.Button(search_frame, text="T√¨m", command=self.handle_search_and_load).pack(side="left", padx=10)
        

    def _setup_student_treeview(self):
        """Thi·∫øt l·∫≠p widget hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu (Treeview)."""
        columns = ("MASV", "TEN", "GIOITINH","NGAYSINH","DIACHI","KHOAHOC", "KHOA","EMAIL")

        self.tree = ttk.Treeview(self.tree_frame, columns=columns, show='headings')

        # Th√™m ƒëo·∫°n n√†y ƒë·ªÉ ·∫©n c·ªôt #0 n·∫øu b·∫°n ch∆∞a l√†m
        self.tree.column('#0', width=0, stretch=False)
        
        # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ c·ªôt
        self.tree.heading("MASV", text="M√£ SV")
        self.tree.heading("TEN", text="H·ªç T√™n")
        self.tree.heading("GIOITINH", text="Gi·ªõi t√≠nh")
        self.tree.heading("NGAYSINH", text="Ng√†y sinh")
        self.tree.heading("DIACHI", text="ƒê·ªãa ch·ªâ")
        self.tree.heading("KHOAHOC", text="Kh√≥a h·ªçc")
        self.tree.heading("KHOA", text="Khoa")
        self.tree.heading("EMAIL", text="Email")

        # Thi·∫øt l·∫≠p chi·ªÅu r·ªông c·ªôt (t√πy ch·ªçn)
        self.tree.column("MASV", width=40, anchor=tk.CENTER)
        self.tree.column("TEN", width=150, anchor=tk.W)
        self.tree.column("GIOITINH", width=50, anchor=tk.CENTER)
        self.tree.column("NGAYSINH", width=100, anchor=tk.W)
        self.tree.column("DIACHI", width=150, anchor=tk.W)
        self.tree.column("KHOAHOC", width=50, anchor=tk.CENTER)
        self.tree.column("KHOA", width=100, anchor=tk.CENTER)
        self.tree.column("EMAIL", width=150, anchor=tk.W)
        
        # Th√™m Scrollbar
        scrollbar = ttk.Scrollbar(self.tree_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    # --- HANDLERS (X·ª≠ l√Ω s·ª± ki·ªán) ---
    def load_students(self):
        """T·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu sinh vi√™n."""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.tree.get_children():
            self.tree.delete(item)

        # L·∫•y d·ªØ li·ªáu t·ª´ DB_Manager
        columns, students = self.db_manager.fetch_all_students() 

        # Ch√®n d·ªØ li·ªáu m·ªõi
        for student in students:
            # student l√† m·ªôt tuple (MASV, TEN, NAM, KHOA)
            self.tree.insert("", tk.END, values=student)
            
    def handle_add_student(self):
        """Thu th·∫≠p d·ªØ li·ªáu v√† g·ªçi h√†m th√™m sinh vi√™n."""
        try:
            
            masv = self.entries['masv'].get().strip().upper()
            ten = self.entries['ten'].get().strip()
            gioitinh = self.entries['gioitinh'].get().strip()
            ngaysinh = self.entries['ngaysinh'].get().strip()
            diachi = self.entries['diachi'].get().strip()
            khoahoc_str = self.entries['khoahoc'].get().strip()
            khoa = self.entries['khoa'].get().strip()
            email = self.entries['email'].get().strip()
        except KeyError as e:
            # B·∫Øt l·ªói n·∫øu c√°c Entry fields ch∆∞a ƒë∆∞·ª£c t·∫°o ho·∫∑c ƒë∆∞·ª£c truy c·∫≠p sai
            messagebox.showerror("L·ªói C·∫•u h√¨nh", f"L·ªói truy c·∫≠p Entry field {e}. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n kh√≥a.")
            return
            
        # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
        if not masv or not ten or not khoahoc_str:
             messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ƒëi·ªÅn ƒë·ªß M√£ SV, H·ªç T√™n v√† NƒÉm Sinh.")
             return

        try:
            khoahoc = int(khoahoc_str)
        except ValueError:
            messagebox.showwarning("L·ªói d·ªØ li·ªáu", "Kh√≥a h·ªçc ph·∫£i l√† s·ªë nguy√™n.")
            return

        # G·ªçi h√†m th√™m t·ª´ DB_Manager
        if self.db_manager.add_student(masv,ten,gioitinh,ngaysinh,diachi,khoahoc,khoa,email):
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m sinh vi√™n {ten} ({masv}).")
            self.load_students() # C·∫≠p nh·∫≠t Treeview
            self._clear_entries()

    def handle_delete_student(self):
        """X·ª≠ l√Ω vi·ªác x√≥a sinh vi√™n ƒë∆∞·ª£c ch·ªçn."""
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("L·ª±a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt sinh vi√™n trong danh s√°ch ƒë·ªÉ x√≥a.")
            return

        # L·∫•y gi√° tr·ªã c·ªßa h√†ng ƒë∆∞·ª£c ch·ªçn (values l√† MASV)
        masv_to_delete = self.tree.item(selected_item, 'values')

        if messagebox.askyesno("X√°c nh·∫≠n X√≥a", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a sinh vi√™n {masv_to_delete}?"):
            if self.db_manager.delete_student(masv_to_delete):
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a sinh vi√™n {masv_to_delete}.")
                self.load_students() # C·∫≠p nh·∫≠t Treeview
                
    def _clear_entries(self):
        """X√≥a n·ªôi dung trong c√°c √¥ nh·∫≠p li·ªáu."""
        for entry in self.entries.values():
            entry.delete(0, tk.END)

    def handle_search_and_load(self):
        try:
            # 1. Thu th·∫≠p ƒë·∫ßu v√†o
            # S·ª≠ d·ª•ng kh√≥a 'search_masv' nh∆∞ ƒë√£ thi·∫øt l·∫≠p trong _setup_input_fields
            search_keyword = self.entries['search_masv'].get().strip()

            # 2. G·ªçi Model ƒë·ªÉ t√¨m ki·∫øm
            # H√†m find_student() s·∫Ω tr·∫£ v·ªÅ t·∫•t c·∫£ sinh vi√™n n·∫øu search_keyword tr·ªëng.
            # (H√†m find_student() ph·∫£i ƒë∆∞·ª£c s·ª≠a l·ªói c√∫ ph√°p SQL v√† tr·∫£ v·ªÅ: columns, students)
            
            # Kh·ªüi t·∫°o students l√† r·ªóng ƒë·ªÉ tr√°nh l·ªói n·∫øu Model g·∫∑p s·ª± c·ªë
            columns, students = None,[] 
            
            # G·ªçi Model (DB_Manager)
            results = self.db_manager.find_student(search_keyword)

            if results and len(results) == 2:
                columns, students = results
            
            # 3. C·∫≠p nh·∫≠t View (Treeview)
            
            # X√≥a d·ªØ li·ªáu c≈© kh·ªèi Treeview
            for item in self.tree.get_children():
                self.tree.delete(item)

            if not students:
                # N·∫øu kh√¥ng t√¨m th·∫•y v√† √¥ t√¨m ki·∫øm kh√¥ng tr·ªëng
                if search_keyword:
                    messagebox.showinfo("T√¨m ki·∫øm", f"Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o kh·ªõp v·ªõi '{search_keyword}'.")
                
                # Sau khi th√¥ng b√°o, n·∫øu kh√¥ng t√¨m th·∫•y g√¨, Treeview s·∫Ω tr·ªëng
                return

            # Ch√®n d·ªØ li·ªáu m·ªõi v√†o Treeview
            for student in students:
                # M·ªói 'student' l√† m·ªôt tuple d·ªØ li·ªáu h√†ng (MASV, TEN, GIOITINH,...)
                self.tree.insert("", tk.END, values=student)
                
        except Exception as e:
            # X·ª≠ l√Ω l·ªói h·ªá th·ªëng ho·∫∑c l·ªói kh√°c (kh√¥ng ph·∫£i l·ªói DB ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω)
            messagebox.showerror("L·ªói Truy v·∫•n H·ªá th·ªëng", f"ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán t√¨m ki·∫øm:\n{e}")